// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package commonproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x03, 0x73, 0xa4,
	0xa4, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xbc, 0xa4, 0xd2, 0x34, 0xfd, 0xd4, 0xdc,
	0x82, 0x92, 0x4a, 0x88, 0x4a, 0x29, 0x19, 0xa8, 0x64, 0x62, 0x41, 0xa6, 0x7e, 0x62, 0x5e, 0x5e,
	0x7e, 0x49, 0x62, 0x49, 0x66, 0x7e, 0x5e, 0x31, 0x44, 0xd6, 0x68, 0x03, 0x23, 0x17, 0x9f, 0x33,
	0xd8, 0xa8, 0x00, 0x10, 0xdf, 0x31, 0xc0, 0x53, 0xc8, 0x97, 0x8b, 0xc3, 0x27, 0xb3, 0x2c, 0x35,
	0x2f, 0xb5, 0xb8, 0x58, 0x48, 0x4c, 0x0f, 0xa2, 0x5b, 0x0f, 0x66, 0xb4, 0x9e, 0x2b, 0xc8, 0x68,
	0x29, 0x1c, 0xe2, 0x4a, 0x82, 0x4d, 0x97, 0x9f, 0x4c, 0x66, 0xe2, 0x16, 0xe2, 0xd4, 0xcf, 0x81,
	0x19, 0xe1, 0xcf, 0xc5, 0x19, 0x94, 0x9a, 0x98, 0x92, 0x49, 0x96, 0x79, 0x42, 0x60, 0xf3, 0x78,
	0x84, 0xb8, 0xf4, 0x8b, 0x60, 0x66, 0x38, 0xf1, 0x46, 0x21, 0x7b, 0x3e, 0x89, 0x0d, 0x4c, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x47, 0x4b, 0x43, 0xb4, 0x1d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommonProtoAPIClient is the client API for CommonProtoAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommonProtoAPIClient interface {
	Liveness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Readiness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type commonProtoAPIClient struct {
	cc *grpc.ClientConn
}

func NewCommonProtoAPIClient(cc *grpc.ClientConn) CommonProtoAPIClient {
	return &commonProtoAPIClient{cc}
}

func (c *commonProtoAPIClient) Liveness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/commonproto.CommonProtoAPI/Liveness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonProtoAPIClient) Readiness(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/commonproto.CommonProtoAPI/Readiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonProtoAPIServer is the server API for CommonProtoAPI service.
type CommonProtoAPIServer interface {
	Liveness(context.Context, *empty.Empty) (*empty.Empty, error)
	Readiness(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedCommonProtoAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCommonProtoAPIServer struct {
}

func (*UnimplementedCommonProtoAPIServer) Liveness(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liveness not implemented")
}
func (*UnimplementedCommonProtoAPIServer) Readiness(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readiness not implemented")
}

func RegisterCommonProtoAPIServer(s *grpc.Server, srv CommonProtoAPIServer) {
	s.RegisterService(&_CommonProtoAPI_serviceDesc, srv)
}

func _CommonProtoAPI_Liveness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonProtoAPIServer).Liveness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonproto.CommonProtoAPI/Liveness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonProtoAPIServer).Liveness(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonProtoAPI_Readiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonProtoAPIServer).Readiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonproto.CommonProtoAPI/Readiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonProtoAPIServer).Readiness(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommonProtoAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commonproto.CommonProtoAPI",
	HandlerType: (*CommonProtoAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Liveness",
			Handler:    _CommonProtoAPI_Liveness_Handler,
		},
		{
			MethodName: "Readiness",
			Handler:    _CommonProtoAPI_Readiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
